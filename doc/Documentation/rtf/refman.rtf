{\rtf1\ansi\ansicpg1252\uc1 \deff0\deflang1033\deflangfe1033
{\fonttbl {\f0\froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}
{\f1\fswiss\fcharset0\fprq2{\*\panose 020b0604020202020204}Arial;}
{\f2\fmodern\fcharset0\fprq1{\*\panose 02070309020205020404}Courier New;}
{\f3\froman\fcharset2\fprq2{\*\panose 05050102010706020507}Symbol;}
}
{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;}
{\stylesheet
{\widctlpar\adjustright \fs20\cgrid \snext0 Normal;}
{\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid \sbasedon0 \snext0 heading 1;}
{\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid \sbasedon0 \snext0 heading 2;}
{\s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid \sbasedon0 \snext0 heading 3;}
{\s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext0 heading 4;}{\*\cs10 \additive Default Paragraph Font;}
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext0 heading 5;}{\*\cs10 \additive Default Paragraph Font;}
{\s15\qc\sb240\sa60\widctlpar\outlinelevel0\adjustright \b\f1\fs32\kerning28\cgrid \sbasedon0 \snext15 Title;}
{\s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid \sbasedon0 \snext16 Subtitle;}
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid \sbasedon0 \snext17 BodyText;}
{\s18\widctlpar\fs22\cgrid \sbasedon0 \snext18 DenseText;}
{\s28\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext28 header;}
{\s29\widctlpar\tqc\tx4320\tqr\tx8640\qr\adjustright \fs20\cgrid \sbasedon0 \snext29 footer;}
{\s30\li360\sa60\sb120\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext30 GroupHeader;}
{\s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext41 Code Example 0;}
{\s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext42 Code Example 1;}
{\s42\li720\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext43 Code Example 2;}
{\s43\li1080\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext44 Code Example 3;}
{\s44\li1440\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext45 Code Example 4;}
{\s45\li1800\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext46 Code Example 5;}
{\s46\li2160\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext47 Code Example 6;}
{\s47\li2520\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext48 Code Example 7;}
{\s48\li2880\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext49 Code Example 8;}
{\s49\li3240\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext49 Code Example 9;}
{\s50\li0\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext51 List Continue 0;}
{\s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext52 List Continue 1;}
{\s52\li720\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext53 List Continue 2;}
{\s53\li1080\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext54 List Continue 3;}
{\s54\li1440\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext55 List Continue 4;}
{\s55\li1800\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext56 List Continue 5;}
{\s56\li2160\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext57 List Continue 6;}
{\s57\li2520\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext58 List Continue 7;}
{\s58\li2880\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext59 List Continue 8;}
{\s59\li3240\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext59 List Continue 9;}
{\s60\li0\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext61 DescContinue 0;}
{\s61\li360\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext62 DescContinue 1;}
{\s62\li720\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext63 DescContinue 2;}
{\s63\li1080\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext64 DescContinue 3;}
{\s64\li1440\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext65 DescContinue 4;}
{\s65\li1800\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext66 DescContinue 5;}
{\s66\li2160\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext67 DescContinue 6;}
{\s67\li2520\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext68 DescContinue 7;}
{\s68\li2880\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext69 DescContinue 8;}
{\s69\li3240\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext69 DescContinue 9;}
{\s70\li0\sa30\sb30\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext81 LatexTOC 0;}
{\s71\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext82 LatexTOC 1;}
{\s72\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext83 LatexTOC 2;}
{\s73\li1080\sa21\sb21\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext84 LatexTOC 3;}
{\s74\li1440\sa18\sb18\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext85 LatexTOC 4;}
{\s75\li1800\sa15\sb15\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext86 LatexTOC 5;}
{\s76\li2160\sa12\sb12\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext87 LatexTOC 6;}
{\s77\li2520\sa9\sb9\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext88 LatexTOC 7;}
{\s78\li2880\sa6\sb6\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext89 LatexTOC 8;}
{\s79\li3240\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext89 LatexTOC 9;}
{\s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext81 \sautoupd List Bullet 0;}
{\s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid \sbasedon0 \snext82 \sautoupd List Bullet 1;}
{\s82\fi-360\li1080\widctlpar\jclisttab\tx1080{\*\pn \pnlvlbody\ilvl0\ls3\pnrnot0\pndec }\ls3\adjustright \fs20\cgrid \sbasedon0 \snext83 \sautoupd List Bullet 2;}
{\s83\fi-360\li1440\widctlpar\jclisttab\tx1440{\*\pn \pnlvlbody\ilvl0\ls4\pnrnot0\pndec }\ls4\adjustright \fs20\cgrid \sbasedon0 \snext84 \sautoupd List Bullet 3;}
{\s84\fi-360\li1800\widctlpar\jclisttab\tx1800{\*\pn \pnlvlbody\ilvl0\ls5\pnrnot0\pndec }\ls5\adjustright \fs20\cgrid \sbasedon0 \snext85 \sautoupd List Bullet 4;}
{\s85\fi-360\li2160\widctlpar\jclisttab\tx2160{\*\pn \pnlvlbody\ilvl0\ls6\pnrnot0\pndec }\ls6\adjustright \fs20\cgrid \sbasedon0 \snext86 \sautoupd List Bullet 5;}
{\s86\fi-360\li2520\widctlpar\jclisttab\tx2520{\*\pn \pnlvlbody\ilvl0\ls7\pnrnot0\pndec }\ls7\adjustright \fs20\cgrid \sbasedon0 \snext87 \sautoupd List Bullet 6;}
{\s87\fi-360\li2880\widctlpar\jclisttab\tx2880{\*\pn \pnlvlbody\ilvl0\ls8\pnrnot0\pndec }\ls8\adjustright \fs20\cgrid \sbasedon0 \snext88 \sautoupd List Bullet 7;}
{\s88\fi-360\li3240\widctlpar\jclisttab\tx3240{\*\pn \pnlvlbody\ilvl0\ls9\pnrnot0\pndec }\ls9\adjustright \fs20\cgrid \sbasedon0 \snext89 \sautoupd List Bullet 8;}
{\s89\fi-360\li3600\widctlpar\jclisttab\tx3600{\*\pn \pnlvlbody\ilvl0\ls10\pnrnot0\pndec }\ls10\adjustright \fs20\cgrid \sbasedon0 \snext89 \sautoupd List Bullet 9;}
{\s90\fi-360\li360\widctlpar\fs20\cgrid \sbasedon0 \snext91 \sautoupd List Enum 0;}
{\s91\fi-360\li720\widctlpar\fs20\cgrid \sbasedon0 \snext92 \sautoupd List Enum 1;}
{\s92\fi-360\li1080\widctlpar\fs20\cgrid \sbasedon0 \snext93 \sautoupd List Enum 2;}
{\s93\fi-360\li1440\widctlpar\fs20\cgrid \sbasedon0 \snext94 \sautoupd List Enum 3;}
{\s94\fi-360\li1800\widctlpar\fs20\cgrid \sbasedon0 \snext95 \sautoupd List Enum 4;}
{\s95\fi-360\li2160\widctlpar\fs20\cgrid \sbasedon0 \snext96 \sautoupd List Enum 5;}
{\s96\fi-360\li2520\widctlpar\fs20\cgrid \sbasedon0 \snext96 \sautoupd List Enum 5;}
{\s97\fi-360\li2880\widctlpar\fs20\cgrid \sbasedon0 \snext98 \sautoupd List Enum 7;}
{\s98\fi-360\li3240\widctlpar\fs20\cgrid \sbasedon0 \snext99 \sautoupd List Enum 8;}
{\s99\fi-360\li3600\widctlpar\fs20\cgrid \sbasedon0 \snext99 \sautoupd List Enum 9;}
}
{\comment begin body}
{\info 
{\title {\comment SMART Energy  {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
1.0 \par
}}SMART Energy}
{\comment Generated byDoxgyen. }
{\creatim \yr2015\mo4\dy27\hr17\min36\sec3}
}\pard\plain 
\sectd\pgnlcrm
{\footer \s29\widctlpar\tqc\tx4320\tqr\tx8640\qr\adjustright \fs20\cgrid {\chpgn}}
\pard\plain \s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid 
\vertalc\qc\par\par\par\par\par\par\par
\pard\plain \s15\qc\sb240\sa60\widctlpar\outlinelevel0\adjustright \b\f1\fs32\kerning28\cgrid 
{\field\fldedit {\*\fldinst TITLE \\*MERGEFORMAT}{\fldrslt TITLE}}\par
\pard\plain \s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid 
\par
\par\par\par\par\par\par\par\par\par\par\par\par
\pard\plain \s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid 
{\field\fldedit {\*\fldinst AUTHOR \\*MERGEFORMAT}{\fldrslt AUTHOR}}\par
Version 1.0\par{\field\fldedit {\*\fldinst CREATEDATE \\*MERGEFORMAT}{\fldrslt CREATEDATE}}\par
\page\page\vertalt
\pard\plain 
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid Table of Contents\par
\pard\plain \par
{\field\fldedit {\*\fldinst TOC \\f \\*MERGEFORMAT}{\fldrslt Table of contents}}\par
\pard\plain 
\sect \sbkpage \pgndec \pgnrestart
\sect \sectd \sbknone
{\footer \s29\widctlpar\tqc\tx4320\tqr\tx8640\qr\adjustright \fs20\cgrid {\chpgn}}

\pard\plain \sect\sbknone
{\pard\widctlpar\brdrb\brdrs\brdrw75\brsp20 \adjustright \par}
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
Main Page\par \pard\plain 
{\tc \v Main Page}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl \v 4}Description \par}
This is the documentation of all classes and codes used in this project to control the consumption and automate the management of electrical energy.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl \v 4}Introduction \par}
Our intention here was to provide the entire documentation about our project to help and facilitate new developers to understand our classes and how we developed the communication with the interface of this project.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl \v 4}Contact \par}
Our contacts are in the Authors document localized in {\f2 https://github.com/Elcasagrande/SMART-Energy} \par
}}

\pard\plain \sect\sbknone
{\pard\widctlpar\brdrb\brdrs\brdrw75\brsp20 \adjustright \par}
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
Class Index\par \pard\plain 
{\tc \v Class Index}
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Class List\par \pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Here are the classes, structs, unions and interfaces with brief descriptions:}
{
\par
\pard\plain \s71\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
{\b {\b CurrentSensor} ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This class allows a interface management to operate the current sensor in a Arduino or any kind of micro controller })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAABO \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b EthernetRequest} ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This class allows a interface management to do communication by ethernet with an Arduino or any kind of micro controller })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAABZ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b MotionSensor} ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This class allows a interface management to operate the PIR sensor in an Arduino or any kind of micro controller.{\i }  })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAACV \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b Relay} ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This class allows a interface management to operate Relay\'B4s in an Arduino or any kind of micro controller })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAADJ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b RelayShield} ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This class allows a interface management to operate more than one {\b Relay} in an Arduino or any kind of micro controller })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAADQ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b VoltageSensor} ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This class allows a interface management to operate the voltage sensor in an Arduino or any kind of micro controller })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAADX \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
\par}
\pard\plain \sect\sbknone
{\pard\widctlpar\brdrb\brdrs\brdrw75\brsp20 \adjustright \par}
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
File Index\par \pard\plain 
{\tc \v File Index}
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
File List\par \pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Here is a list of all files with brief descriptions:}
{
\par
\pard\plain \s71\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
{\b D:/Projects/SMART Energy/SMART-Energy/libraries/Config/{\b Config.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAAO \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b D:/Projects/SMART Energy/SMART-Energy/libraries/CurrentSensor/src/{\b CurrentSensor.cpp} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAAW \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b D:/Projects/SMART Energy/SMART-Energy/libraries/CurrentSensor/src/{\b CurrentSensor.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAAX \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b D:/Projects/SMART Energy/SMART-Energy/libraries/EthernetRequest/src/{\b EthernetRequest.cpp} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAAY \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b D:/Projects/SMART Energy/SMART-Energy/libraries/EthernetRequest/src/{\b EthernetRequest.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAAZ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b D:/Projects/SMART Energy/SMART-Energy/libraries/MotionSensor/src/{\b MotionSensor.cpp} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAABA \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b D:/Projects/SMART Energy/SMART-Energy/libraries/MotionSensor/src/{\b MotionSensor.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAABB \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b D:/Projects/SMART Energy/SMART-Energy/libraries/RelayShield/src/{\b Relay.cpp} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAABI \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b D:/Projects/SMART Energy/SMART-Energy/libraries/RelayShield/src/{\b Relay.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAABJ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b D:/Projects/SMART Energy/SMART-Energy/libraries/RelayShield/src/{\b RelayShield.cpp} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAABK \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b D:/Projects/SMART Energy/SMART-Energy/libraries/RelayShield/src/{\b RelayShield.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAABL \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b D:/Projects/SMART Energy/SMART-Energy/libraries/VoltageSensor/src/{\b VoltageSensor.cpp} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAABM \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b D:/Projects/SMART Energy/SMART-Energy/libraries/VoltageSensor/src/{\b VoltageSensor.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAABN \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
\par}
\pard\plain \sect\sbknone
{\pard\widctlpar\brdrb\brdrs\brdrw75\brsp20 \adjustright \par}
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
Class Documentation{\tc \v Class Documentation}
\par \pard\plain 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
CurrentSensor Class Reference\par \pard\plain 
{\tc\tcl2 \v CurrentSensor}
{\xe \v CurrentSensor}
{\bkmkstart AAAAAAAABO}
{\bkmkend AAAAAAAABO}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This class allows a interface management to operate the current sensor in a Arduino or any kind of micro controller. }}\par
{
{\f2 #include <CurrentSensor.h>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b CurrentSensor} ()\par
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Initializes the variables {\i } . }{
}\par
}}
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b begin} (int {\b pin})\par
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Initializes the object with the port specified {\i } . }{
}\par
}}
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b update} ()\par
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Updates the current sensor value. }{
}\par
}}
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b read} ()\par
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Read the Current sensor average {\i } . }{
}\par
}}
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Private Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b determineQuiescentVoltage} ()\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Private Attributes\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b pin}\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b zeroVoltage}\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b actualCurrent}\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b readCount}\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
unsigned long {\b sumCurrent}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This class allows a interface management to operate the current sensor in a Arduino or any kind of micro controller. \par
}

{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Author:\par}\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid Guilherme Engler Stadelhofer \par
}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Version:\par}\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid 1.0 \par
}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Since:\par}\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid 2015-04-02 \par
}}{
Definition at line {\b 14} of file {\b CurrentSensor.h}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Constructor & Destructor Documentation\par
\pard\plain 
{\xe \v CurrentSensor\:CurrentSensor}
{\xe \v CurrentSensor\:CurrentSensor}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
CurrentSensor::CurrentSensor ()}}
\par
{\bkmkstart AAAAAAAABP}
{\bkmkend AAAAAAAABP}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Initializes the variables {\i } . }}\par
{
Definition at line {\b 20} of file {\b CurrentSensor.cpp}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v begin\:CurrentSensor}
{\xe \v CurrentSensor\:begin}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void CurrentSensor::begin (int  {\i pin})}}
\par
{\bkmkstart AAAAAAAABQ}
{\bkmkend AAAAAAAABQ}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Initializes the object with the port specified {\i } . }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters:\par}
\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i pin} \cell }{- The port connected to the current sensor. \cell }
{\row }
}
}{
Definition at line {\b 56} of file {\b CurrentSensor.cpp}.}\par
}
{\xe \v determineQuiescentVoltage\:CurrentSensor}
{\xe \v CurrentSensor\:determineQuiescentVoltage}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int CurrentSensor::determineQuiescentVoltage (){\f2 [private]}}}
\par
{\bkmkstart AAAAAAAABR}
{\bkmkend AAAAAAAABR}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 31} of file {\b CurrentSensor.cpp}.}\par
{
Referenced by {\b begin()}begin().}\par
}
{\xe \v read\:CurrentSensor}
{\xe \v CurrentSensor\:read}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int CurrentSensor::read ()}}
\par
{\bkmkstart AAAAAAAABS}
{\bkmkend AAAAAAAABS}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Read the Current sensor average {\i } . }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid The average of the sensor value. \par
}}{
Definition at line {\b 100} of file {\b CurrentSensor.cpp}.}\par
}
{\xe \v update\:CurrentSensor}
{\xe \v CurrentSensor\:update}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void CurrentSensor::update ()}}
\par
{\bkmkstart AAAAAAAABT}
{\bkmkend AAAAAAAABT}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Updates the current sensor value. }}\par
{
Definition at line {\b 66} of file {\b CurrentSensor.cpp}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Data Documentation\par
\pard\plain 
{\xe \v actualCurrent\:CurrentSensor}
{\xe \v CurrentSensor\:actualCurrent}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int CurrentSensor::actualCurrent{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAABU}
{\bkmkend AAAAAAAABU}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 19} of file {\b CurrentSensor.h}.}\par
{
Referenced by {\b CurrentSensor()}CurrentSensor(), {\b read()}read(), and {\b update()}update().}\par
}
{\xe \v pin\:CurrentSensor}
{\xe \v CurrentSensor\:pin}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int CurrentSensor::pin{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAABV}
{\bkmkend AAAAAAAABV}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 17} of file {\b CurrentSensor.h}.}\par
{
Referenced by {\b begin()}begin(), {\b determineQuiescentVoltage()}determineQuiescentVoltage(), and {\b update()}update().}\par
}
{\xe \v readCount\:CurrentSensor}
{\xe \v CurrentSensor\:readCount}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int CurrentSensor::readCount{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAABW}
{\bkmkend AAAAAAAABW}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 20} of file {\b CurrentSensor.h}.}\par
{
Referenced by {\b CurrentSensor()}CurrentSensor(), and {\b update()}update().}\par
}
{\xe \v sumCurrent\:CurrentSensor}
{\xe \v CurrentSensor\:sumCurrent}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
unsigned long CurrentSensor::sumCurrent{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAABX}
{\bkmkend AAAAAAAABX}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 21} of file {\b CurrentSensor.h}.}\par
{
Referenced by {\b CurrentSensor()}CurrentSensor(), and {\b update()}update().}\par
}
{\xe \v zeroVoltage\:CurrentSensor}
{\xe \v CurrentSensor\:zeroVoltage}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int CurrentSensor::zeroVoltage{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAABY}
{\bkmkend AAAAAAAABY}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 18} of file {\b CurrentSensor.h}.}\par
{
Referenced by {\b determineQuiescentVoltage()}determineQuiescentVoltage(), and {\b update()}update().}\par
}
\par \pard\plain 

\pard\plain \sect\sbknone
{\pard\widctlpar\brdrb\brdremboss\brdrw15\brsp20 \adjustright \par}
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
EthernetRequest Class Reference\par \pard\plain 
{\tc\tcl2 \v EthernetRequest}
{\xe \v EthernetRequest}
{\bkmkstart AAAAAAAABZ}
{\bkmkend AAAAAAAABZ}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This class allows a interface management to do communication by ethernet with an Arduino or any kind of micro controller. }}\par
{
{\f2 #include <EthernetRequest.h>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
enum \{ {\b UNKNOWN}, 
{\b CHECK_STATUS}, 
{\b TOGGLE}, 
{\b MOTION}
 \}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b EthernetRequest} ()\par
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Initializes the variables {\i } . }{
}\par
}}
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b begin} (byte mac[], byte ip[])\par
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Start the communication with the parameters specified {\i } . }{
}\par
}}
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b isAvailable} ()\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint8_t {\b getMethod} ()\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b getParam} (uint8_t paramSeq)\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b addString} (String varName, String varValue)\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b addInt} (String varName, int varValue)\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b sendAnswer} ()\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Private Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b processRequest} ()\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b addValue} (String varName, String varValue)\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Private Attributes\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
EthernetServer {\b server}\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
EthernetClient {\b client}\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
String {\b currentUrl}\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint8_t {\b currentMethod}\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b params} [2]\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
String {\b answerValue}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This class allows a interface management to do communication by ethernet with an Arduino or any kind of micro controller. \par
}

{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Author:\par}\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid Elton Faust \par
}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Version:\par}\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid 1.0 \par
}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Since:\par}\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid 2015-04-11 \par
}}{
Definition at line {\b 19} of file {\b EthernetRequest.h}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Enumeration Documentation\par
\pard\plain 
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
anonymous enum}}
\par
{\bkmkstart AAAAAAAACA}
{\bkmkend AAAAAAAACA}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{{{\b \par
Enumerator}}\par
\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid {\xe \v UNKNOWN\:EthernetRequest}
{\xe \v EthernetRequest\:UNKNOWN}
{\b {\i UNKNOWN{\bkmkstart AAAAAAAACB}
{\bkmkend AAAAAAAACB}
}}  \par
{\xe \v CHECK_STATUS\:EthernetRequest}
{\xe \v EthernetRequest\:CHECK_STATUS}
{\b {\i CHECK_STATUS{\bkmkstart AAAAAAAACC}
{\bkmkend AAAAAAAACC}
}}  \par
{\xe \v TOGGLE\:EthernetRequest}
{\xe \v EthernetRequest\:TOGGLE}
{\b {\i TOGGLE{\bkmkstart AAAAAAAACD}
{\bkmkend AAAAAAAACD}
}}  \par
{\xe \v MOTION\:EthernetRequest}
{\xe \v EthernetRequest\:MOTION}
{\b {\i MOTION{\bkmkstart AAAAAAAACE}
{\bkmkend AAAAAAAACE}
}}  \par
}{
Definition at line {\b 52} of file {\b EthernetRequest.h}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Constructor & Destructor Documentation\par
\pard\plain 
{\xe \v EthernetRequest\:EthernetRequest}
{\xe \v EthernetRequest\:EthernetRequest}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
EthernetRequest::EthernetRequest ()}}
\par
{\bkmkstart AAAAAAAACF}
{\bkmkend AAAAAAAACF}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Initializes the variables {\i } . }}\par
{
Definition at line {\b 16} of file {\b EthernetRequest.cpp}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v addInt\:EthernetRequest}
{\xe \v EthernetRequest\:addInt}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void EthernetRequest::addInt (String  {\i varName}, int  {\i varValue})}}
\par
{\bkmkstart AAAAAAAACG}
{\bkmkend AAAAAAAACG}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 69} of file {\b EthernetRequest.cpp}.}\par
}
{\xe \v addString\:EthernetRequest}
{\xe \v EthernetRequest\:addString}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void EthernetRequest::addString (String  {\i varName}, String  {\i varValue})}}
\par
{\bkmkstart AAAAAAAACH}
{\bkmkend AAAAAAAACH}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 64} of file {\b EthernetRequest.cpp}.}\par
}
{\xe \v addValue\:EthernetRequest}
{\xe \v EthernetRequest\:addValue}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void EthernetRequest::addValue (String  {\i varName}, String  {\i varValue}){\f2 [private]}}}
\par
{\bkmkstart AAAAAAAACI}
{\bkmkend AAAAAAAACI}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 165} of file {\b EthernetRequest.cpp}.}\par
{
Referenced by {\b addInt()}addInt(), and {\b addString()}addString().}\par
}
{\xe \v begin\:EthernetRequest}
{\xe \v EthernetRequest\:begin}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void EthernetRequest::begin (byte  {\i mac}[], byte  {\i ip}[])}}
\par
{\bkmkstart AAAAAAAACJ}
{\bkmkend AAAAAAAACJ}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Start the communication with the parameters specified {\i } . }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters:\par}
\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i mac} \cell }{- The mac address. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i ip} \cell }{- The IP. \cell }
{\row }
}
}{
Definition at line {\b 26} of file {\b EthernetRequest.cpp}.}\par
}
{\xe \v getMethod\:EthernetRequest}
{\xe \v EthernetRequest\:getMethod}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
uint8_t EthernetRequest::getMethod ()}}
\par
{\bkmkstart AAAAAAAACK}
{\bkmkend AAAAAAAACK}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 50} of file {\b EthernetRequest.cpp}.}\par
}
{\xe \v getParam\:EthernetRequest}
{\xe \v EthernetRequest\:getParam}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int EthernetRequest::getParam (uint8_t  {\i paramSeq})}}
\par
{\bkmkstart AAAAAAAACL}
{\bkmkend AAAAAAAACL}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 55} of file {\b EthernetRequest.cpp}.}\par
}
{\xe \v isAvailable\:EthernetRequest}
{\xe \v EthernetRequest\:isAvailable}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool EthernetRequest::isAvailable ()}}
\par
{\bkmkstart AAAAAAAACM}
{\bkmkend AAAAAAAACM}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 33} of file {\b EthernetRequest.cpp}.}\par
}
{\xe \v processRequest\:EthernetRequest}
{\xe \v EthernetRequest\:processRequest}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void EthernetRequest::processRequest (){\f2 [private]}}}
\par
{\bkmkstart AAAAAAAACN}
{\bkmkend AAAAAAAACN}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 97} of file {\b EthernetRequest.cpp}.}\par
{
Referenced by {\b isAvailable()}isAvailable().}\par
}
{\xe \v sendAnswer\:EthernetRequest}
{\xe \v EthernetRequest\:sendAnswer}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void EthernetRequest::sendAnswer ()}}
\par
{\bkmkstart AAAAAAAACO}
{\bkmkend AAAAAAAACO}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 74} of file {\b EthernetRequest.cpp}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Data Documentation\par
\pard\plain 
{\xe \v answerValue\:EthernetRequest}
{\xe \v EthernetRequest\:answerValue}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
String EthernetRequest::answerValue{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAACP}
{\bkmkend AAAAAAAACP}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Holds the formatted response to the request \par
}{
Definition at line {\b 31} of file {\b EthernetRequest.h}.}\par
{
Referenced by {\b addValue()}addValue(), {\b EthernetRequest()}EthernetRequest(), {\b isAvailable()}isAvailable(), and {\b sendAnswer()}sendAnswer().}\par
}
{\xe \v client\:EthernetRequest}
{\xe \v EthernetRequest\:client}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
EthernetClient EthernetRequest::client{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAACQ}
{\bkmkend AAAAAAAACQ}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Holds the ethernet client \par
}{
Definition at line {\b 25} of file {\b EthernetRequest.h}.}\par
{
Referenced by {\b isAvailable()}isAvailable(), {\b processRequest()}processRequest(), and {\b sendAnswer()}sendAnswer().}\par
}
{\xe \v currentMethod\:EthernetRequest}
{\xe \v EthernetRequest\:currentMethod}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
uint8_t EthernetRequest::currentMethod{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAACR}
{\bkmkend AAAAAAAACR}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 28} of file {\b EthernetRequest.h}.}\par
{
Referenced by {\b EthernetRequest()}EthernetRequest(), {\b getMethod()}getMethod(), {\b isAvailable()}isAvailable(), and {\b processRequest()}processRequest().}\par
}
{\xe \v currentUrl\:EthernetRequest}
{\xe \v EthernetRequest\:currentUrl}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
String EthernetRequest::currentUrl{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAACS}
{\bkmkend AAAAAAAACS}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 27} of file {\b EthernetRequest.h}.}\par
{
Referenced by {\b EthernetRequest()}EthernetRequest(), {\b isAvailable()}isAvailable(), and {\b processRequest()}processRequest().}\par
}
{\xe \v params\:EthernetRequest}
{\xe \v EthernetRequest\:params}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int EthernetRequest::params[2]{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAACT}
{\bkmkend AAAAAAAACT}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Holds the parameters passed on request \par
}{
Definition at line {\b 29} of file {\b EthernetRequest.h}.}\par
{
Referenced by {\b getParam()}getParam(), and {\b processRequest()}processRequest().}\par
}
{\xe \v server\:EthernetRequest}
{\xe \v EthernetRequest\:server}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
EthernetServer EthernetRequest::server{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAACU}
{\bkmkend AAAAAAAACU}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Holds the ethernet server \par
}{
Definition at line {\b 24} of file {\b EthernetRequest.h}.}\par
{
Referenced by {\b begin()}begin(), and {\b isAvailable()}isAvailable().}\par
}
\par \pard\plain 

\pard\plain \sect\sbknone
{\pard\widctlpar\brdrb\brdremboss\brdrw15\brsp20 \adjustright \par}
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
MotionSensor Class Reference\par \pard\plain 
{\tc\tcl2 \v MotionSensor}
{\xe \v MotionSensor}
{\bkmkstart AAAAAAAACV}
{\bkmkend AAAAAAAACV}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This class allows a interface management to operate the PIR sensor in an Arduino or any kind of micro controller.{\i } . }}\par
{
{\f2 #include <MotionSensor.h>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b MotionSensor} ()\par
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Initializes the variables{\i } . }{
}\par
}}
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b begin} (int)\par
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Initializes the object with the port specified {\i } . }{
}\par
}}
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b start} (int, int)\par
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Starts checking for motions{\i } . }{
}\par
}}
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b stop} ()\par
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Stop scanning for motions resetting the time interval to default(0) and setting the motion detected variable to default(1){\i } . }{
}\par
}}
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b read} ()\par
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Get if was detected motion in the interval time or not. {\i } . }{
}\par
}}
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b update} ()\par
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
If the time interval were defined different from the default value 0, this function will update the value of the sensor and will check if the defined interval time passed without detections of motions. }{
}\par
}}
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b getInterval} ()\par
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Get the interval time defined by user or not, converting it from milliseconds to minutes. }{
}\par
}}
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b getRelay} ()\par
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Get the relay defined by user. }{
}\par
}}
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Private Attributes\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b _port}\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b _relay}\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
unsigned long {\b _interval}\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
unsigned long {\b _previousMillis}\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b _detectedMotion}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This class allows a interface management to operate the PIR sensor in an Arduino or any kind of micro controller.{\i } . \par
}

{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Author:\par}\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid Lucas C. Casagrande \par
}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Version:\par}\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid 1.0 \par
}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Since:\par}\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid 2015-04-12 \par
}}{
Definition at line {\b 29} of file {\b MotionSensor.h}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Constructor & Destructor Documentation\par
\pard\plain 
{\xe \v MotionSensor\:MotionSensor}
{\xe \v MotionSensor\:MotionSensor}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
MotionSensor::MotionSensor ()}}
\par
{\bkmkstart AAAAAAAACW}
{\bkmkend AAAAAAAACW}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Initializes the variables{\i } . }}\par
{
Definition at line {\b 16} of file {\b MotionSensor.cpp}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v begin\:MotionSensor}
{\xe \v MotionSensor\:begin}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void MotionSensor::begin (int  {\i port})}}
\par
{\bkmkstart AAAAAAAACX}
{\bkmkend AAAAAAAACX}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Initializes the object with the port specified {\i } . }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters:\par}
\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i port} \cell }{- The port connected to the motion sensor. \cell }
{\row }
}
}{
Definition at line {\b 28} of file {\b MotionSensor.cpp}.}\par
}
{\xe \v getInterval\:MotionSensor}
{\xe \v MotionSensor\:getInterval}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int MotionSensor::getInterval ()}}
\par
{\bkmkstart AAAAAAAACY}
{\bkmkend AAAAAAAACY}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Get the interval time defined by user or not, converting it from milliseconds to minutes. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid The defined interval converted to minutes. \par
}}{
Definition at line {\b 69} of file {\b MotionSensor.cpp}.}\par
}
{\xe \v getRelay\:MotionSensor}
{\xe \v MotionSensor\:getRelay}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int MotionSensor::getRelay ()}}
\par
{\bkmkstart AAAAAAAACZ}
{\bkmkend AAAAAAAACZ}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Get the relay defined by user. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid The {\b Relay} number. \par
}}{
Definition at line {\b 75} of file {\b MotionSensor.cpp}.}\par
}
{\xe \v read\:MotionSensor}
{\xe \v MotionSensor\:read}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool MotionSensor::read ()}}
\par
{\bkmkstart AAAAAAAADA}
{\bkmkend AAAAAAAADA}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Get if was detected motion in the interval time or not. {\i } . }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid Return if was detected motion or if the time interval has passed with no motion detected. \par
}}{
Definition at line {\b 47} of file {\b MotionSensor.cpp}.}\par
}
{\xe \v start\:MotionSensor}
{\xe \v MotionSensor\:start}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void MotionSensor::start (int  {\i interval}, int  {\i relay})}}
\par
{\bkmkstart AAAAAAAADB}
{\bkmkend AAAAAAAADB}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Starts checking for motions{\i } . }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters:\par}
\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i interval} \cell }{- The interval time to check if was not detected any movement. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i relay} \cell }{- The relay number used to control. \cell }
{\row }
}
}{
Definition at line {\b 33} of file {\b MotionSensor.cpp}.}\par
}
{\xe \v stop\:MotionSensor}
{\xe \v MotionSensor\:stop}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void MotionSensor::stop ()}}
\par
{\bkmkstart AAAAAAAADC}
{\bkmkend AAAAAAAADC}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Stop scanning for motions resetting the time interval to default(0) and setting the motion detected variable to default(1){\i } . }}\par
{
Definition at line {\b 41} of file {\b MotionSensor.cpp}.}\par
}
{\xe \v update\:MotionSensor}
{\xe \v MotionSensor\:update}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void MotionSensor::update ()}}
\par
{\bkmkstart AAAAAAAADD}
{\bkmkend AAAAAAAADD}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
If the time interval were defined different from the default value 0, this function will update the value of the sensor and will check if the defined interval time passed without detections of motions. }}\par
{
Definition at line {\b 52} of file {\b MotionSensor.cpp}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Data Documentation\par
\pard\plain 
{\xe \v _detectedMotion\:MotionSensor}
{\xe \v MotionSensor\:_detectedMotion}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool MotionSensor::_detectedMotion{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAADE}
{\bkmkend AAAAAAAADE}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
If motion has detected something or no interval time was defined this holds true. If the interval time passed whitout any motion this holds false. \par
}{
Definition at line {\b 77} of file {\b MotionSensor.h}.}\par
{
Referenced by {\b MotionSensor()}MotionSensor(), {\b read()}read(), {\b stop()}stop(), and {\b update()}update().}\par
}
{\xe \v _interval\:MotionSensor}
{\xe \v MotionSensor\:_interval}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
unsigned long MotionSensor::_interval{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAADF}
{\bkmkend AAAAAAAADF}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Holds the interval time used to verify the spent time without motion detected \par
}{
Definition at line {\b 75} of file {\b MotionSensor.h}.}\par
{
Referenced by {\b getInterval()}getInterval(), {\b MotionSensor()}MotionSensor(), {\b start()}start(), {\b stop()}stop(), and {\b update()}update().}\par
}
{\xe \v _port\:MotionSensor}
{\xe \v MotionSensor\:_port}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int MotionSensor::_port{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAADG}
{\bkmkend AAAAAAAADG}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Holds the port used for the motion sensor \par
}{
Definition at line {\b 73} of file {\b MotionSensor.h}.}\par
{
Referenced by {\b begin()}begin(), and {\b update()}update().}\par
}
{\xe \v _previousMillis\:MotionSensor}
{\xe \v MotionSensor\:_previousMillis}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
unsigned long MotionSensor::_previousMillis{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAADH}
{\bkmkend AAAAAAAADH}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Holds the time when the verifying started \par
}{
Definition at line {\b 76} of file {\b MotionSensor.h}.}\par
{
Referenced by {\b MotionSensor()}MotionSensor(), {\b start()}start(), and {\b update()}update().}\par
}
{\xe \v _relay\:MotionSensor}
{\xe \v MotionSensor\:_relay}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int MotionSensor::_relay{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAADI}
{\bkmkend AAAAAAAADI}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Holds the relay used to control \par
}{
Definition at line {\b 74} of file {\b MotionSensor.h}.}\par
{
Referenced by {\b getRelay()}getRelay(), {\b MotionSensor()}MotionSensor(), and {\b start()}start().}\par
}
\par \pard\plain 

\pard\plain \sect\sbknone
{\pard\widctlpar\brdrb\brdremboss\brdrw15\brsp20 \adjustright \par}
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Relay Class Reference\par \pard\plain 
{\tc\tcl2 \v Relay}
{\xe \v Relay}
{\bkmkstart AAAAAAAADJ}
{\bkmkend AAAAAAAADJ}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This class allows a interface management to operate Relay\'B4s in an Arduino or any kind of micro controller. }}\par
{
{\f2 #include <Relay.h>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Relay} ()\par
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Initializes the variables {\i } . }{
}\par
}}
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b begin} (int {\b pin})\par
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Initializes the object with the port specified {\i } . }{
}\par
}}
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b toggleState} ()\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b activated} ()\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Private Attributes\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b pin}\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b state}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This class allows a interface management to operate Relay\'B4s in an Arduino or any kind of micro controller. \par
}

{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Author:\par}\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid Guilherme Engler Stadelhofer \par
}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Version:\par}\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid 1.0 \par
}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Since:\par}\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid 2015-04-11 \par
}}{
Definition at line {\b 15} of file {\b Relay.h}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Constructor & Destructor Documentation\par
\pard\plain 
{\xe \v Relay\:Relay}
{\xe \v Relay\:Relay}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
Relay::Relay ()}}
\par
{\bkmkstart AAAAAAAADK}
{\bkmkend AAAAAAAADK}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Initializes the variables {\i } . }}\par
{
Definition at line {\b 15} of file {\b Relay.cpp}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v activated\:Relay}
{\xe \v Relay\:activated}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool Relay::activated ()}}
\par
{\bkmkstart AAAAAAAADL}
{\bkmkend AAAAAAAADL}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 49} of file {\b Relay.cpp}.}\par
}
{\xe \v begin\:Relay}
{\xe \v Relay\:begin}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Relay::begin (int  {\i pin})}}
\par
{\bkmkstart AAAAAAAADM}
{\bkmkend AAAAAAAADM}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Initializes the object with the port specified {\i } . }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters:\par}
\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i pin} \cell }{- The port connected to the voltage sensor. \cell }
{\row }
}
}{
Definition at line {\b 25} of file {\b Relay.cpp}.}\par
{
Referenced by {\b RelayShield::begin()}RelayShield::begin().}\par
}
{\xe \v toggleState\:Relay}
{\xe \v Relay\:toggleState}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool Relay::toggleState ()}}
\par
{\bkmkstart AAAAAAAADN}
{\bkmkend AAAAAAAADN}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 35} of file {\b Relay.cpp}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Data Documentation\par
\pard\plain 
{\xe \v pin\:Relay}
{\xe \v Relay\:pin}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int Relay::pin{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAADO}
{\bkmkend AAAAAAAADO}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Holds the port used for the {\b Relay} \par
}{
Definition at line {\b 18} of file {\b Relay.h}.}\par
{
Referenced by {\b begin()}begin(), {\b Relay()}Relay(), and {\b toggleState()}toggleState().}\par
}
{\xe \v state\:Relay}
{\xe \v Relay\:state}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool Relay::state{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAADP}
{\bkmkend AAAAAAAADP}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Holds the state of the {\b Relay} \par
}{
Definition at line {\b 19} of file {\b Relay.h}.}\par
{
Referenced by {\b activated()}activated(), {\b Relay()}Relay(), and {\b toggleState()}toggleState().}\par
}
\par \pard\plain 

\pard\plain \sect\sbknone
{\pard\widctlpar\brdrb\brdremboss\brdrw15\brsp20 \adjustright \par}
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
RelayShield Class Reference\par \pard\plain 
{\tc\tcl2 \v RelayShield}
{\xe \v RelayShield}
{\bkmkstart AAAAAAAADQ}
{\bkmkend AAAAAAAADQ}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This class allows a interface management to operate more than one {\b Relay} in an Arduino or any kind of micro controller. }}\par
{
{\f2 #include <RelayShield.h>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b RelayShield} ()\par
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Initializes the variables {\i } . }{
}\par
}}
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b begin} (int pin[])\par
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Initializes the objects with the port specified{\i } . }{
}\par
}}
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Relay} * {\b getRelay} (int index)\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b acceptableRelayIndex} (int index)\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b anyRelayActivated} ()\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Private Attributes\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Relay} * {\b relays} [{\b MAX_RELAY_QUANTITY}]\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This class allows a interface management to operate more than one {\b Relay} in an Arduino or any kind of micro controller. \par
}

{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
It should be used with {\b Relay} Library.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Author:\par}\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid Guilherme Engler Stadelhofer \par
}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Version:\par}\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid 1.0 \par
}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Since:\par}\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid 2015-04-11 \par
}}{
Definition at line {\b 20} of file {\b RelayShield.h}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Constructor & Destructor Documentation\par
\pard\plain 
{\xe \v RelayShield\:RelayShield}
{\xe \v RelayShield\:RelayShield}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
RelayShield::RelayShield ()}}
\par
{\bkmkstart AAAAAAAADR}
{\bkmkend AAAAAAAADR}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Initializes the variables {\i } . }}\par
{
Definition at line {\b 19} of file {\b RelayShield.cpp}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v acceptableRelayIndex\:RelayShield}
{\xe \v RelayShield\:acceptableRelayIndex}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool RelayShield::acceptableRelayIndex (int  {\i index})}}
\par
{\bkmkstart AAAAAAAADS}
{\bkmkend AAAAAAAADS}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 41} of file {\b RelayShield.cpp}.}\par
}
{\xe \v anyRelayActivated\:RelayShield}
{\xe \v RelayShield\:anyRelayActivated}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool RelayShield::anyRelayActivated ()}}
\par
{\bkmkstart AAAAAAAADT}
{\bkmkend AAAAAAAADT}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 46} of file {\b RelayShield.cpp}.}\par
}
{\xe \v begin\:RelayShield}
{\xe \v RelayShield\:begin}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void RelayShield::begin (int  {\i pin}[])}}
\par
{\bkmkstart AAAAAAAADU}
{\bkmkend AAAAAAAADU}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Initializes the objects with the port specified{\i } . }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters:\par}
\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i pin} \cell }{- The port connected to the relay. \cell }
{\row }
}
}{
Definition at line {\b 29} of file {\b RelayShield.cpp}.}\par
}
{\xe \v getRelay\:RelayShield}
{\xe \v RelayShield\:getRelay}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b Relay} RelayShield::getRelay (int  {\i index})}}
\par
{\bkmkstart AAAAAAAADV}
{\bkmkend AAAAAAAADV}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters:\par}
\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i index} \cell }{- The index of the relay. \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid {\b Relay} - The relay localized at defined index. \par
}}{
Definition at line {\b 36} of file {\b RelayShield.cpp}.}\par
{
Referenced by {\b anyRelayActivated()}anyRelayActivated(), and {\b begin()}begin().}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Data Documentation\par
\pard\plain 
{\xe \v relays\:RelayShield}
{\xe \v RelayShield\:relays}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b Relay}* RelayShield::relays[{\b MAX_RELAY_QUANTITY}]{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAADW}
{\bkmkend AAAAAAAADW}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Holds a array of Relays \par
}{
Definition at line {\b 23} of file {\b RelayShield.h}.}\par
{
Referenced by {\b getRelay()}getRelay(), and {\b RelayShield()}RelayShield().}\par
}
\par \pard\plain 

\pard\plain \sect\sbknone
{\pard\widctlpar\brdrb\brdremboss\brdrw15\brsp20 \adjustright \par}
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
VoltageSensor Class Reference\par \pard\plain 
{\tc\tcl2 \v VoltageSensor}
{\xe \v VoltageSensor}
{\bkmkstart AAAAAAAADX}
{\bkmkend AAAAAAAADX}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This class allows a interface management to operate the voltage sensor in an Arduino or any kind of micro controller. }}\par
{
{\f2 #include <VoltageSensor.h>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b VoltageSensor} ()\par
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Initializes the variables {\i } . }{
}\par
}}
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b read} ()\par
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Read the Voltage sensor average {\i } . }{
}\par
}}
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b begin} (int)\par
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Initializes the object with the port specified {\i } . }{
}\par
}}
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b update} ()\par
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Updates the voltage sensor value. }{
}\par
}}
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b setDivisor} (int)\par
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Change the divisor to a user-defined value. {\i The}  divider begins with a default defined as 100 times. }{
}\par
}}
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b reset} ()\par
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Reset the counter and the voltage sum variables to 0. {\i } . }{
}\par
}}
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Private Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b calculateAvg} (int)\par
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Increments the updated value received with the sum maded by the last updates, and increments the counter used as a flag to activate the calculation function of the voltage average value.{\i } . }{
}\par
}}
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Private Attributes\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b _port}\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b _divisor}\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b _cont}\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
long {\b _sumVoltage}\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
long {\b _avgVoltage}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This class allows a interface management to operate the voltage sensor in an Arduino or any kind of micro controller. \par
}

{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
The read function will only return a voltage average value determinated by the divisor variable.\par
Because of that you will have to call the update function in the loop of your sketch to increment the counter who will activate the calculate of the average value.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Author:\par}\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid Lucas C. Casagrande \par
}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Version:\par}\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid 1.0 \par
}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Since:\par}\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid 2015-04-11 \par
}}{
Definition at line {\b 22} of file {\b VoltageSensor.h}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Constructor & Destructor Documentation\par
\pard\plain 
{\xe \v VoltageSensor\:VoltageSensor}
{\xe \v VoltageSensor\:VoltageSensor}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
VoltageSensor::VoltageSensor ()}}
\par
{\bkmkstart AAAAAAAADY}
{\bkmkend AAAAAAAADY}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Initializes the variables {\i } . }}\par
{
Definition at line {\b 16} of file {\b VoltageSensor.cpp}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v begin\:VoltageSensor}
{\xe \v VoltageSensor\:begin}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void VoltageSensor::begin (int  {\i port})}}
\par
{\bkmkstart AAAAAAAADZ}
{\bkmkend AAAAAAAADZ}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Initializes the object with the port specified {\i } . }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters:\par}
\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i port} \cell }{- The port connected to the voltage sensor. \cell }
{\row }
}
}{
Definition at line {\b 27} of file {\b VoltageSensor.cpp}.}\par
}
{\xe \v calculateAvg\:VoltageSensor}
{\xe \v VoltageSensor\:calculateAvg}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void VoltageSensor::calculateAvg (int  {\i value}){\f2 [private]}}}
\par
{\bkmkstart AAAAAAAAEA}
{\bkmkend AAAAAAAAEA}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Increments the updated value received with the sum maded by the last updates, and increments the counter used as a flag to activate the calculation function of the voltage average value.{\i } . }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Each time it is updated, the sum of the voltage sensor values will increase until the time counter activates the calculate of the voltage average value. When the average is calculated the variables are reset. {\i }  \par
The flag activation and the divisor used to calculate the voltage value average is calculated by the default value of 100 times, but you can change this variable calling the setDiv function.{\i } .\par
The conversion of the sensor value what is analog(0-1023) to a value what is referent to the Voltage (0-220V), is made by the function of the arduino called map(). To calibrate this function with your sensor, you will have to get the maximum read voltage from your socket connected to the sensor and the maximum read analog value in the pin of arduino. Then, in the code, you will have to change the parameters of map function to yours new values. \par
 Eg: map(analogRead, 0, maxAnalogRead, 0, maxSocketRead). {\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters:\par}
\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i value} \cell }{- Holds the last read value of the voltage sensor. \cell }
{\row }
}
}{
Definition at line {\b 60} of file {\b VoltageSensor.cpp}.}\par
{
Referenced by {\b update()}update().}\par
}
{\xe \v read\:VoltageSensor}
{\xe \v VoltageSensor\:read}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int VoltageSensor::read ()}}
\par
{\bkmkstart AAAAAAAAEB}
{\bkmkend AAAAAAAAEB}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Read the Voltage sensor average {\i } . }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid The average of the sensor value. \par
}}{
Definition at line {\b 45} of file {\b VoltageSensor.cpp}.}\par
}
{\xe \v reset\:VoltageSensor}
{\xe \v VoltageSensor\:reset}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void VoltageSensor::reset ()}}
\par
{\bkmkstart AAAAAAAAEC}
{\bkmkend AAAAAAAAEC}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Reset the counter and the voltage sum variables to 0. {\i } . }}\par
{
Definition at line {\b 39} of file {\b VoltageSensor.cpp}.}\par
{
Referenced by {\b calculateAvg()}calculateAvg().}\par
}
{\xe \v setDivisor\:VoltageSensor}
{\xe \v VoltageSensor\:setDivisor}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void VoltageSensor::setDivisor (int  {\i divisor})}}
\par
{\bkmkstart AAAAAAAAED}
{\bkmkend AAAAAAAAED}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Change the divisor to a user-defined value. {\i The}  divider begins with a default defined as 100 times. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters:\par}
\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i divisor} \cell }{- The divisor used to do the flag activation and to calculate the voltage average. \cell }
{\row }
}
}{
Definition at line {\b 50} of file {\b VoltageSensor.cpp}.}\par
}
{\xe \v update\:VoltageSensor}
{\xe \v VoltageSensor\:update}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void VoltageSensor::update ()}}
\par
{\bkmkstart AAAAAAAAEE}
{\bkmkend AAAAAAAAEE}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Updates the voltage sensor value. }}\par
{
Definition at line {\b 32} of file {\b VoltageSensor.cpp}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Data Documentation\par
\pard\plain 
{\xe \v _avgVoltage\:VoltageSensor}
{\xe \v VoltageSensor\:_avgVoltage}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
long VoltageSensor::_avgVoltage{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAAEF}
{\bkmkend AAAAAAAAEF}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Holds the average of the voltage sensor values \par
}{
Definition at line {\b 58} of file {\b VoltageSensor.h}.}\par
{
Referenced by {\b calculateAvg()}calculateAvg(), {\b read()}read(), and {\b VoltageSensor()}VoltageSensor().}\par
}
{\xe \v _cont\:VoltageSensor}
{\xe \v VoltageSensor\:_cont}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int VoltageSensor::_cont{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAAEG}
{\bkmkend AAAAAAAAEG}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Counter used as a flag to check when call the average function \par
}{
Definition at line {\b 56} of file {\b VoltageSensor.h}.}\par
{
Referenced by {\b calculateAvg()}calculateAvg(), {\b reset()}reset(), and {\b VoltageSensor()}VoltageSensor().}\par
}
{\xe \v _divisor\:VoltageSensor}
{\xe \v VoltageSensor\:_divisor}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int VoltageSensor::_divisor{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAAEH}
{\bkmkend AAAAAAAAEH}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
The divisor used to calculate the average \par
}{
Definition at line {\b 55} of file {\b VoltageSensor.h}.}\par
{
Referenced by {\b calculateAvg()}calculateAvg(), {\b setDivisor()}setDivisor(), and {\b VoltageSensor()}VoltageSensor().}\par
}
{\xe \v _port\:VoltageSensor}
{\xe \v VoltageSensor\:_port}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int VoltageSensor::_port{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAAEI}
{\bkmkend AAAAAAAAEI}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Holds the port used for the voltage sensor \par
}{
Definition at line {\b 54} of file {\b VoltageSensor.h}.}\par
{
Referenced by {\b begin()}begin(), and {\b update()}update().}\par
}
{\xe \v _sumVoltage\:VoltageSensor}
{\xe \v VoltageSensor\:_sumVoltage}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
long VoltageSensor::_sumVoltage{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAAEJ}
{\bkmkend AAAAAAAAEJ}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Holds the sum of the voltage sensor values \par
}{
Definition at line {\b 57} of file {\b VoltageSensor.h}.}\par
{
Referenced by {\b calculateAvg()}calculateAvg(), {\b reset()}reset(), and {\b VoltageSensor()}VoltageSensor().}\par
}

\pard\plain \sect\sbknone
{\pard\widctlpar\brdrb\brdrs\brdrw75\brsp20 \adjustright \par}
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
File Documentation{\tc \v File Documentation}
\par \pard\plain 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
D:/Projects/SMART Energy/SMART-Energy/doc/Documentation/DESCRIPTION.md File Reference\par \pard\plain 
{\tc\tcl2 \v D:/Projects/SMART Energy/SMART-Energy/doc/Documentation/DESCRIPTION.md}
{\xe \v D:/Projects/SMART Energy/SMART-Energy/doc/Documentation/DESCRIPTION.md}
{\bkmkstart AAAAAAAAAN}
{\bkmkend AAAAAAAAAN}
\par \pard\plain 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
D:/Projects/SMART Energy/SMART-Energy/doc/Documentation/DESCRIPTION.md\par \pard\plain 
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     1 SMART Energy\par
    2 ================================================\par
    3 \par
    4 Description\par
    5 ------------\par
    6     This is the documentation of all classes and codes used in this project to control \par
    7 the consumption and automate the management of electrical energy.\par
    8 \par
    9 Introduction\par
   10 ------------\par
   11     Our intention here was to provide the entire documentation about our project to\par
   12 help and facilitate new developers to understand our classes and how we developed \par
   13 the communication with the interface of this project.\par
   14     \par
   15 Contact\par
   16 -------\par
   17     Our contacts are in the Authors document localized in https://github.com/Elcasagrande/SMART-Energy \par
}
\par \pard\plain 

\pard\plain \sect\sbknone
{\pard\widctlpar\brdrb\brdremboss\brdrw15\brsp20 \adjustright \par}
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
D:/Projects/SMART Energy/SMART-Energy/libraries/Config/Config.h File Reference\par \pard\plain 
{\tc\tcl2 \v D:/Projects/SMART Energy/SMART-Energy/libraries/Config/Config.h}
{\xe \v D:/Projects/SMART Energy/SMART-Energy/libraries/Config/Config.h}
{\bkmkstart AAAAAAAAAO}
{\bkmkend AAAAAAAAAO}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include <SPI.h>}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Macros\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b MAC_ADDRESS}\~ \{ 0xDE, 0xAD, 0xBE, 0xEF, 0xFE, 0xED \}\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b IP_ADDRESS}\~ \{ 192, 168, 1, 2 \}\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CURRENT_SENSOR_INPUT}\~ 10\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b VOLTAGE_SENSOR_INPUT}\~ 9\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b MOTION_SENSOR_INPUT}\~ 9\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b RELAY_OUTPUT}\~ \{ 32, 33, 34, 35 \}\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b MAX_RELAY_QUANTITY}\~ 4\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Macro Definition Documentation\par
\pard\plain 
{\xe \v CURRENT_SENSOR_INPUT\:Config.h}
{\xe \v Config.h\:CURRENT_SENSOR_INPUT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CURRENT_SENSOR_INPUT\~ 10}}
\par
{\bkmkstart AAAAAAAAAP}
{\bkmkend AAAAAAAAAP}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 10} of file {\b Config.h}.}\par
}
{\xe \v IP_ADDRESS\:Config.h}
{\xe \v Config.h\:IP_ADDRESS}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define IP_ADDRESS\~ \{ 192, 168, 1, 2 \}}}
\par
{\bkmkstart AAAAAAAAAQ}
{\bkmkend AAAAAAAAAQ}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 7} of file {\b Config.h}.}\par
}
{\xe \v MAC_ADDRESS\:Config.h}
{\xe \v Config.h\:MAC_ADDRESS}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define MAC_ADDRESS\~ \{ 0xDE, 0xAD, 0xBE, 0xEF, 0xFE, 0xED \}}}
\par
{\bkmkstart AAAAAAAAAR}
{\bkmkend AAAAAAAAAR}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 4} of file {\b Config.h}.}\par
}
{\xe \v MAX_RELAY_QUANTITY\:Config.h}
{\xe \v Config.h\:MAX_RELAY_QUANTITY}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define MAX_RELAY_QUANTITY\~ 4}}
\par
{\bkmkstart AAAAAAAAAS}
{\bkmkend AAAAAAAAAS}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 22} of file {\b Config.h}.}\par
{
Referenced by {\b RelayShield::acceptableRelayIndex()}RelayShield::acceptableRelayIndex(), {\b RelayShield::anyRelayActivated()}RelayShield::anyRelayActivated(), {\b RelayShield::begin()}RelayShield::begin(), and {\b RelayShield::RelayShield()}RelayShield::RelayShield().}\par
}
{\xe \v MOTION_SENSOR_INPUT\:Config.h}
{\xe \v Config.h\:MOTION_SENSOR_INPUT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define MOTION_SENSOR_INPUT\~ 9}}
\par
{\bkmkstart AAAAAAAAAT}
{\bkmkend AAAAAAAAAT}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 16} of file {\b Config.h}.}\par
}
{\xe \v RELAY_OUTPUT\:Config.h}
{\xe \v Config.h\:RELAY_OUTPUT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define RELAY_OUTPUT\~ \{ 32, 33, 34, 35 \}}}
\par
{\bkmkstart AAAAAAAAAU}
{\bkmkend AAAAAAAAAU}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 19} of file {\b Config.h}.}\par
}
{\xe \v VOLTAGE_SENSOR_INPUT\:Config.h}
{\xe \v Config.h\:VOLTAGE_SENSOR_INPUT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define VOLTAGE_SENSOR_INPUT\~ 9}}
\par
{\bkmkstart AAAAAAAAAV}
{\bkmkend AAAAAAAAAV}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 13} of file {\b Config.h}.}\par
}
\par \pard\plain 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Config.h\par \pard\plain 
{\tc\tcl2 \v D:/Projects/SMART Energy/SMART-Energy/libraries/Config/Config.h}
{\xe \v D:/Projects/SMART Energy/SMART-Energy/libraries/Config/Config.h}
{\bkmkstart AAAAAAAAAA}
{\bkmkend AAAAAAAAAA}
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     1 #include <SPI.h>\par
    2 \par
    3 // Endere\'E7o MAC do Ethernet Shield\par
    4 #define MAC_ADDRESS             \{ 0xDE, 0xAD, 0xBE, 0xEF, 0xFE, 0xED \}\par
    5 \par
    6 // Endere\'E7o IP do Ethernet Shield\par
    7 #define IP_ADDRESS              \{ 192, 168, 1, 2 \}\par
    8 \par
    9 // Pino de entrada do sensor de corrente\par
   10 #define CURRENT_SENSOR_INPUT    10\par
   11 \par
   12 // Pino de entrada do sensor de tens\'E3o\par
   13 #define VOLTAGE_SENSOR_INPUT    9\par
   14 \par
   15 // Pino de entrada do sensor de movimento\par
   16 #define MOTION_SENSOR_INPUT     9\par
   17 \par
   18 // Pinos de sa\'EDda dos rel\'E9s\par
   19 #define RELAY_OUTPUT            \{ 32, 33, 34, 35 \}\par
   20 \par
   21 // Quantidade de rel\'E9s que ser\'E3o utilizados\par
   22 #define MAX_RELAY_QUANTITY      4\par
   23 \par
   24 // N\'FAmero de amostras que ser\'E3o lidas do sensor at\'E9 definir uma valor correto para a corrente \par
   25 #define CURRENT_SENSOR_SAMPLES  250\par
}
\par \pard\plain 

\pard\plain \sect\sbknone
{\pard\widctlpar\brdrb\brdremboss\brdrw15\brsp20 \adjustright \par}
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
D:/Projects/SMART Energy/SMART-Energy/libraries/CurrentSensor/src/CurrentSensor.cpp File Reference\par \pard\plain 
{\tc\tcl2 \v D:/Projects/SMART Energy/SMART-Energy/libraries/CurrentSensor/src/CurrentSensor.cpp}
{\xe \v D:/Projects/SMART Energy/SMART-Energy/libraries/CurrentSensor/src/CurrentSensor.cpp}
{\bkmkstart AAAAAAAAAW}
{\bkmkend AAAAAAAAAW}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include <SPI.h>}\par
{\f2 #include <VoltageSensor.h>}\par
{\f2 #include <Config.h>}\par
{\f2 #include "CurrentSensor.h"}\par
}
\par \pard\plain 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
CurrentSensor.cpp\par \pard\plain 
{\tc\tcl2 \v D:/Projects/SMART Energy/SMART-Energy/libraries/CurrentSensor/src/CurrentSensor.cpp}
{\xe \v D:/Projects/SMART Energy/SMART-Energy/libraries/CurrentSensor/src/CurrentSensor.cpp}
{\bkmkstart AAAAAAAAAB}
{\bkmkend AAAAAAAAAB}
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     1 /*\par
    2  * CurrentSensor.cpp - Current Sensor library\par
    3  * Guilherme Engler Stadelhofer.\par
    4  */\par
    5 \par
    6 //******************************************************************************\par
    7 //* Includes\par
    8 //******************************************************************************\par
    9 \par
   10 #include <SPI.h>\par
   11 #include <VoltageSensor.h>\par
   12 #include <Config.h>\par
   13 \par
   14 #include "CurrentSensor.h"\par
   15 \par
   16 //******************************************************************************\par
   17 //* Constructors\par
   18 //******************************************************************************\par
   19 \par
   20 CurrentSensor::CurrentSensor() \{\par
   21     \par
   22     this->sumCurrent = 0UL;\par
   23     this->actualCurrent = 0;\par
   24     this->readCount = 0;\par
   25 \}\par
   26 \par
   27 //******************************************************************************\par
   28 //* Private Methods\par
   29 //******************************************************************************\par
   30 \par
   31 int CurrentSensor::determineQuiescentVoltage()\par
   32 \{\par
   33     long value = 0;\par
   34     int samples = 1000;\par
   35     \par
   36     for (int i = 0; i < samples; i++) \{\par
   37         value += analogRead(this->pin);\par
   38         delay(1);\par
   39     \}\par
   40     \par
   41     value /= samples;\par
   42     \par
   43     // map(VQ, 0, 1023, 0, 5000) = Valor em mV\par
   44     this->zeroVoltage = int(value);\par
   45     \par
   46     //this->zeroVoltage = map(value, 0, 1023, 0, 5000);\par
   47     \par
   48     Serial.print("Quiescent Voltage: ");\par
   49     Serial.print(this->zeroVoltage);\par
   50     Serial.println(" mV");\par
   51 \}\par
   52 \par
   53 //******************************************************************************\par
   54 //* Public Methods\par
   55 //******************************************************************************\par
   56 void CurrentSensor::begin(int pin)\par
   57 \{\par
   58     if (this->pin == 0) \{\par
   59         this->pin = pin;\par
   60         pinMode(pin, INPUT);\par
   61         \par
   62         this->determineQuiescentVoltage();\par
   63     \}\par
   64 \}\par
   65 \par
   66 void CurrentSensor::update()\par
   67 \{\par
   68     int raw = analogRead(this->pin) - this->zeroVoltage;\par
   69     this->sumCurrent += (unsigned long)(raw * raw);\par
   70     this->readCount++;\par
   71     \par
   72     if (this->readCount >= CURRENT_SENSOR_SAMPLES) \{\par
   73         this->actualCurrent = int(sqrt((float)this->sumCurrent/(float)this->readCount) * (75.7576 / 1024.0) * 1000);\par
   74         this->readCount = 0;\par
   75         this->sumCurrent = 0UL;\par
   76     \}\par
   77 \}\par
   78 \par
   79 /*\par
   80 void CurrentSensor::update()\par
   81 \{\par
   82     // Modelo de 30A tem sensibilidade de 66mV/A\par
   83     int mVperAmp = 66;\par
   84     \par
   85     int rawValue = analogRead(this->pin);\par
   86     this->sumCurrent += rawValue;\par
   87     this->readCount++;\par
   88     \par
   89     if (this->readCount >= CURRENT_SENSOR_SAMPLES) \{\par
   90         int rawAverage = (float) this->sumCurrent / (float)this->readCount;\par
   91         int voltage = ((rawAverage / 1023.0) * 5000) - this->zeroVoltage;\par
   92         this->actualCurrent = int((abs(voltage) / (float)mVperAmp) * 1000);\par
   93         \par
   94         this->readCount = 0;\par
   95         this->sumCurrent = 0UL;\par
   96     \}\par
   97 \}\par
   98 */\par
   99 \par
  100 int CurrentSensor::read()\par
  101 \{\par
  102     return this->actualCurrent;\par
  103 \}\par
}
\par \pard\plain 

\pard\plain \sect\sbknone
{\pard\widctlpar\brdrb\brdremboss\brdrw15\brsp20 \adjustright \par}
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
D:/Projects/SMART Energy/SMART-Energy/libraries/CurrentSensor/src/CurrentSensor.h File Reference\par \pard\plain 
{\tc\tcl2 \v D:/Projects/SMART Energy/SMART-Energy/libraries/CurrentSensor/src/CurrentSensor.h}
{\xe \v D:/Projects/SMART Energy/SMART-Energy/libraries/CurrentSensor/src/CurrentSensor.h}
{\bkmkstart AAAAAAAAAX}
{\bkmkend AAAAAAAAAX}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Classes\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b CurrentSensor}\par
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This class allows a interface management to operate the current sensor in a Arduino or any kind of micro controller. }}}
}
\par \pard\plain 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
CurrentSensor.h\par \pard\plain 
{\tc\tcl2 \v D:/Projects/SMART Energy/SMART-Energy/libraries/CurrentSensor/src/CurrentSensor.h}
{\xe \v D:/Projects/SMART Energy/SMART-Energy/libraries/CurrentSensor/src/CurrentSensor.h}
{\bkmkstart AAAAAAAAAC}
{\bkmkend AAAAAAAAAC}
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     1 \par
   11 #ifndef CURRENT_SENSOR_H\par
   12 #define CURRENT_SENSOR_H\par
   13 \par
   14 class CurrentSensor \{\par
   15     \par
   16     private:\par
   17         int pin;\par
   18         int zeroVoltage; \par
   19         int actualCurrent; \par
   20         int readCount; \par
   21         unsigned long sumCurrent; \par
   22         int determineQuiescentVoltage();\par
   23         \par
   24     public:\par
   25         CurrentSensor();\par
   29         void begin(int pin);\par
   34         void update();\par
   38         int read();\par
   44 \};\par
   45 \par
   46 #endif\par
}
\par \pard\plain 

\pard\plain \sect\sbknone
{\pard\widctlpar\brdrb\brdremboss\brdrw15\brsp20 \adjustright \par}
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
D:/Projects/SMART Energy/SMART-Energy/libraries/EthernetRequest/src/EthernetRequest.cpp File Reference\par \pard\plain 
{\tc\tcl2 \v D:/Projects/SMART Energy/SMART-Energy/libraries/EthernetRequest/src/EthernetRequest.cpp}
{\xe \v D:/Projects/SMART Energy/SMART-Energy/libraries/EthernetRequest/src/EthernetRequest.cpp}
{\bkmkstart AAAAAAAAAY}
{\bkmkend AAAAAAAAAY}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include "EthernetRequest.h"}\par
}
\par \pard\plain 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
EthernetRequest.cpp\par \pard\plain 
{\tc\tcl2 \v D:/Projects/SMART Energy/SMART-Energy/libraries/EthernetRequest/src/EthernetRequest.cpp}
{\xe \v D:/Projects/SMART Energy/SMART-Energy/libraries/EthernetRequest/src/EthernetRequest.cpp}
{\bkmkstart AAAAAAAAAD}
{\bkmkend AAAAAAAAAD}
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     1 /*\par
    2  * EthernetRequest.cpp - EthernetRequest library\par
    3  * Elton Faust.\par
    4  */\par
    5 \par
    6 //******************************************************************************\par
    7 //* Includes\par
    8 //******************************************************************************\par
    9 \par
   10 #include "EthernetRequest.h"\par
   11 \par
   12 //******************************************************************************\par
   13 //* Constructors\par
   14 //******************************************************************************\par
   15 \par
   16 EthernetRequest::EthernetRequest() : server(80)\par
   17 \{\par
   18     this->currentUrl = "";\par
   19     this->currentMethod = EthernetRequest::UNKNOWN;\par
   20     this->answerValue = "";\par
   21 \}\par
   22 //******************************************************************************\par
   23 //* Public Methods\par
   24 //******************************************************************************\par
   25 \par
   26 void EthernetRequest::begin(byte mac[], byte ip[]) \par
   27 \{\par
   28     Ethernet.begin(mac, ip);\par
   29     this->server.begin();\par
   30     Serial.println("Started");\par
   31 \}\par
   32 \par
   33 bool EthernetRequest::isAvailable() \par
   34 \{\par
   35     this->client = this->server.available();\par
   36     \par
   37     if(!this->client || !this->client.connected()) \{\par
   38         return false;\par
   39     \}\par
   40     \par
   41     this->currentUrl = "";\par
   42     this->currentMethod = EthernetRequest::UNKNOWN;\par
   43     this->answerValue = "";\par
   44     \par
   45     this->processRequest();\par
   46     \par
   47     return true;\par
   48 \}\par
   49 \par
   50 uint8_t EthernetRequest::getMethod() \par
   51 \{\par
   52     return this->currentMethod;\par
   53 \}\par
   54 \par
   55 int EthernetRequest::getParam(uint8_t paramSeq) \par
   56 \{\par
   57     if(paramSeq == 0 || paramSeq > 2)\par
   58         return 0;\par
   59 \par
   60     return this->params[paramSeq - 1];\par
   61 \}\par
   62 \par
   63 \par
   64 void EthernetRequest::addString(String varName, String varValue) \par
   65 \{\par
   66     this->addValue(varName, "\\"" + varValue + "\\"");\par
   67 \}\par
   68 \par
   69 void EthernetRequest::addInt(String varName, int varValue) \par
   70 \{\par
   71     this->addValue(varName, String(varValue));\par
   72 \}\par
   73 \par
   74 void EthernetRequest::sendAnswer() \par
   75 \{\par
   76     if (this->client.connected()) \{\par
   77         this->client.println("HTTP/1.1 200 OK");\par
   78         this->client.println("Access-Control-Allow-Origin: *");\par
   79         this->client.println("Content-Type: text/html");\par
   80         this->client.println();\par
   81         \par
   82         if(this->answerValue != "") \{\par
   83             this->client.print("\{");\par
   84             this->client.print(this->answerValue);\par
   85             this->client.println("\}");\par
   86         \}\par
   87     \par
   88         delay(10);\par
   89         this->client.stop();\par
   90     \}\par
   91 \}\par
   92 \par
   93 //******************************************************************************\par
   94 //* Private Methods\par
   95 //******************************************************************************\par
   96 \par
   97 void EthernetRequest::processRequest() \par
   98 \{\par
   99     bool startedUrlRead = false;\par
  100 \par
  101     while (this->client.connected()) \{\par
  102         if (this->client.available()) \{\par
  103             char c = this->client.read();\par
  104 \par
  105             if(c == ' ') \{\par
  106                 if (!startedUrlRead) \{\par
  107                     startedUrlRead = true;\par
  108                 \} else \{\par
  109                     \par
  110                     if (this->currentUrl.startsWith("/toggle")) \{\par
  111                         this->currentMethod = EthernetRequest::TOGGLE;\par
  112                         this->currentUrl = this->currentUrl.substring(8);\par
  113                         \par
  114                     \} else if(this->currentUrl.startsWith("/motion")) \{\par
  115                         this->currentMethod = EthernetRequest::MOTION;\par
  116                         this->currentUrl = this->currentUrl.substring(8);\par
  117                     \} else if(this->currentUrl == "/status") \{\par
  118                         this->currentMethod = EthernetRequest::CHECK_STATUS;\par
  119                         this->currentUrl = this->currentUrl.substring(8);\par
  120                     \} else \{\par
  121                         this->currentUrl = this->currentUrl.substring(1);\par
  122                     \}\par
  123                     \par
  124                     uint8_t lastParam = 0;\par
  125                     String paramValue = "";\par
  126                     bool isSeparator = false;\par
  127                     \par
  128                     int currentUrlLength = this->currentUrl.length();\par
  129                     \par
  130                     if (currentUrlLength > 0) \{\par
  131                         \par
  132                         for (int cc = 0; cc < currentUrlLength; cc++) \{\par
  133                             \par
  134                             isSeparator = this->currentUrl[cc] == '/';\par
  135                             \par
  136                             if (!isSeparator) \{\par
  137                                 paramValue += this->currentUrl[cc];\par
  138                             \}\par
  139                             \par
  140                             if (isSeparator || (cc + 1) == currentUrlLength) \{\par
  141                                 this->params[lastParam] = paramValue.toInt();\par
  142                                 \par
  143                                 paramValue = "";\par
  144                                 lastParam++;\par
  145                                 \par
  146                                 if (lastParam == 2) \{\par
  147                                     break;\par
  148                                 \}\par
  149                                 \par
  150                             \}\par
  151                         \}\par
  152                         \par
  153                         this->client.flush();\par
  154                         break;\par
  155                     \}   \par
  156                 \}\par
  157             \} else if (startedUrlRead) \{\par
  158                 this->currentUrl += c;\par
  159             \}\par
  160         \}\par
  161     \}\par
  162 \}\par
  163 \par
  164 \par
  165 void EthernetRequest::addValue(String varName, String varValue) \par
  166 \{\par
  167     if(this->answerValue != "") \{\par
  168         this->answerValue.concat(",");\par
  169     \}\par
  170     \par
  171     this->answerValue.concat("\\"" + varName + "\\":" + varValue);\par
  172 \}\par
  173 \par
}
\par \pard\plain 

\pard\plain \sect\sbknone
{\pard\widctlpar\brdrb\brdremboss\brdrw15\brsp20 \adjustright \par}
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
D:/Projects/SMART Energy/SMART-Energy/libraries/EthernetRequest/src/EthernetRequest.h File Reference\par \pard\plain 
{\tc\tcl2 \v D:/Projects/SMART Energy/SMART-Energy/libraries/EthernetRequest/src/EthernetRequest.h}
{\xe \v D:/Projects/SMART Energy/SMART-Energy/libraries/EthernetRequest/src/EthernetRequest.h}
{\bkmkstart AAAAAAAAAZ}
{\bkmkend AAAAAAAAAZ}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include <SPI.h>}\par
{\f2 #include <Ethernet.h>}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Classes\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b EthernetRequest}\par
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This class allows a interface management to do communication by ethernet with an Arduino or any kind of micro controller. }}}
}
\par \pard\plain 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
EthernetRequest.h\par \pard\plain 
{\tc\tcl2 \v D:/Projects/SMART Energy/SMART-Energy/libraries/EthernetRequest/src/EthernetRequest.h}
{\xe \v D:/Projects/SMART Energy/SMART-Energy/libraries/EthernetRequest/src/EthernetRequest.h}
{\bkmkstart AAAAAAAAAE}
{\bkmkend AAAAAAAAAE}
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     1 \par
   13 #include <SPI.h>\par
   14 #include <Ethernet.h>\par
   15 \par
   16 #ifndef ETHERNET_REQUEST_H\par
   17 #define ETHERNET_REQUEST_H\par
   18 \par
   19 class EthernetRequest\{\par
   20     private:\par
   21         void processRequest();\par
   22         void addValue(String varName, String varValue);\par
   23         \par
   24         EthernetServer server; \par
   25         EthernetClient client; \par
   27         String currentUrl; \par
   28         uint8_t currentMethod; \par
   29         int params[2]; \par
   31         String answerValue; \par
   33     public:\par
   34         EthernetRequest();\par
   39         void begin(byte mac[], byte ip[]);\par
   45         bool isAvailable();     \par
   46         uint8_t getMethod();\par
   47         int getParam(uint8_t paramSeq);\par
   48         void addString(String varName, String varValue);\par
   49         void addInt(String varName, int varValue);      \par
   50         void sendAnswer();\par
   51         \par
   52         enum\{UNKNOWN, CHECK_STATUS, TOGGLE, MOTION\};\par
   53 \};\par
   54 \par
   55 #endif\par
}
\par \pard\plain 

\pard\plain \sect\sbknone
{\pard\widctlpar\brdrb\brdremboss\brdrw15\brsp20 \adjustright \par}
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
D:/Projects/SMART Energy/SMART-Energy/libraries/MotionSensor/src/MotionSensor.cpp File Reference\par \pard\plain 
{\tc\tcl2 \v D:/Projects/SMART Energy/SMART-Energy/libraries/MotionSensor/src/MotionSensor.cpp}
{\xe \v D:/Projects/SMART Energy/SMART-Energy/libraries/MotionSensor/src/MotionSensor.cpp}
{\bkmkstart AAAAAAAABA}
{\bkmkend AAAAAAAABA}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include "MotionSensor.h"}\par
}
\par \pard\plain 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
MotionSensor.cpp\par \pard\plain 
{\tc\tcl2 \v D:/Projects/SMART Energy/SMART-Energy/libraries/MotionSensor/src/MotionSensor.cpp}
{\xe \v D:/Projects/SMART Energy/SMART-Energy/libraries/MotionSensor/src/MotionSensor.cpp}
{\bkmkstart AAAAAAAAAF}
{\bkmkend AAAAAAAAAF}
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     1 /*\par
    2 * MotionSensor.cpp - MotionSensor Sensor library\par
    3 * Lucas C. Casagrande\par
    4 */\par
    5 \par
    6 //******************************************************************************\par
    7 //* Includes\par
    8 //******************************************************************************\par
    9 \par
   10 #include "MotionSensor.h"\par
   11 \par
   12 //******************************************************************************\par
   13 //* Constructors\par
   14 //******************************************************************************\par
   15 \par
   16 MotionSensor::MotionSensor()\par
   17 \{\par
   18     this->_interval       = 0;\par
   19     this->_detectedMotion = 0;\par
   20     this->_previousMillis = 0;\par
   21     this->_relay          = 0;\par
   22 \}\par
   23 \par
   24 //******************************************************************************\par
   25 //* Public Methods\par
   26 //******************************************************************************\par
   27 \par
   28 void MotionSensor::begin(int port)\par
   29 \{\par
   30     this->_port = port;\par
   31 \}\par
   32 \par
   33 void MotionSensor::start(int interval, int relay)\par
   34 \{\par
   35     //call stop to reset the variables before we start.\par
   36     this->_previousMillis = millis();\par
   37     this->_interval       = secsToMillis(interval);\par
   38     this->_relay          = relay;\par
   39 \}\par
   40 \par
   41 void MotionSensor::stop()\par
   42 \{\par
   43     this->_interval       = 0;\par
   44     this->_detectedMotion = 0;\par
   45 \}\par
   46 \par
   47 bool MotionSensor::read()\par
   48 \{\par
   49     return _detectedMotion;\par
   50 \}\par
   51 \par
   52 void MotionSensor::update()\par
   53 \{   \par
   54     if (_interval > 0) \par
   55     \{\par
   56         bool motionDetected = digitalRead(_port);\par
   57         if (motionDetected)\par
   58         \{\par
   59             this->_previousMillis = millis();\par
   60             this->_detectedMotion = 0;\par
   61         \}\par
   62         else if ((millis() - _previousMillis) >= _interval)\par
   63         \{\par
   64             this->_detectedMotion = 1;\par
   65         \}\par
   66     \}\par
   67 \}\par
   68 \par
   69 int MotionSensor::getInterval()\par
   70 \{\par
   71     int minutes = millisToSeconds(_interval);\par
   72     return minutes;\par
   73 \}\par
   74 \par
   75 int MotionSensor::getRelay()\par
   76 \{\par
   77     return this->_relay;\par
   78 \}\par
}
\par \pard\plain 

\pard\plain \sect\sbknone
{\pard\widctlpar\brdrb\brdremboss\brdrw15\brsp20 \adjustright \par}
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
D:/Projects/SMART Energy/SMART-Energy/libraries/MotionSensor/src/MotionSensor.h File Reference\par \pard\plain 
{\tc\tcl2 \v D:/Projects/SMART Energy/SMART-Energy/libraries/MotionSensor/src/MotionSensor.h}
{\xe \v D:/Projects/SMART Energy/SMART-Energy/libraries/MotionSensor/src/MotionSensor.h}
{\bkmkstart AAAAAAAABB}
{\bkmkend AAAAAAAABB}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include "Arduino.h"}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Classes\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b MotionSensor}\par
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This class allows a interface management to operate the PIR sensor in an Arduino or any kind of micro controller.{\i } . }}}
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Macros\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b MILLIS_PER_MIN}\~ (60000UL)\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b MILLIS_PER_SECS}\~ (1000UL)\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b SECS_PER_MIN}\~ (60UL)\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b secsToMillis}(_sec_)\~ (  _sec_  * {\b MILLIS_PER_SECS})\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b millisToMinutes}(_millis_)\~ ((_millis_ / {\b MILLIS_PER_MIN}) % {\b SECS_PER_MIN})\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b millisToSeconds}(_millis_)\~ (_millis_ / {\b MILLIS_PER_SECS})\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Macro Definition Documentation\par
\pard\plain 
{\xe \v MILLIS_PER_MIN\:MotionSensor.h}
{\xe \v MotionSensor.h\:MILLIS_PER_MIN}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define MILLIS_PER_MIN\~ (60000UL)}}
\par
{\bkmkstart AAAAAAAABC}
{\bkmkend AAAAAAAABC}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Milliseconds per minute. \par
}{
Definition at line {\b 15} of file {\b MotionSensor.h}.}\par
}
{\xe \v MILLIS_PER_SECS\:MotionSensor.h}
{\xe \v MotionSensor.h\:MILLIS_PER_SECS}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define MILLIS_PER_SECS\~ (1000UL)}}
\par
{\bkmkstart AAAAAAAABD}
{\bkmkend AAAAAAAABD}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Milliseconds per seconds. \par
}{
Definition at line {\b 17} of file {\b MotionSensor.h}.}\par
}
{\xe \v millisToMinutes\:MotionSensor.h}
{\xe \v MotionSensor.h\:millisToMinutes}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define millisToMinutes( _millis_)\~ ((_millis_ / {\b MILLIS_PER_MIN}) % {\b SECS_PER_MIN})}}
\par
{\bkmkstart AAAAAAAABE}
{\bkmkend AAAAAAAABE}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Converts milliseconds to minutes. \par
}{
Definition at line {\b 23} of file {\b MotionSensor.h}.}\par
}
{\xe \v millisToSeconds\:MotionSensor.h}
{\xe \v MotionSensor.h\:millisToSeconds}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define millisToSeconds( _millis_)\~ (_millis_ / {\b MILLIS_PER_SECS})}}
\par
{\bkmkstart AAAAAAAABF}
{\bkmkend AAAAAAAABF}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Converts milliseconds to seconds. \par
}{
Definition at line {\b 25} of file {\b MotionSensor.h}.}\par
{
Referenced by {\b MotionSensor::getInterval()}MotionSensor::getInterval().}\par
}
{\xe \v SECS_PER_MIN\:MotionSensor.h}
{\xe \v MotionSensor.h\:SECS_PER_MIN}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define SECS_PER_MIN\~ (60UL)}}
\par
{\bkmkstart AAAAAAAABG}
{\bkmkend AAAAAAAABG}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Seconds per minute. \par
}{
Definition at line {\b 19} of file {\b MotionSensor.h}.}\par
}
{\xe \v secsToMillis\:MotionSensor.h}
{\xe \v MotionSensor.h\:secsToMillis}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define secsToMillis( _sec_)\~ (  _sec_  * {\b MILLIS_PER_SECS})}}
\par
{\bkmkstart AAAAAAAABH}
{\bkmkend AAAAAAAABH}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Converts minutes to milliseconds. \par
}{
Definition at line {\b 21} of file {\b MotionSensor.h}.}\par
{
Referenced by {\b MotionSensor::start()}MotionSensor::start().}\par
}
\par \pard\plain 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
MotionSensor.h\par \pard\plain 
{\tc\tcl2 \v D:/Projects/SMART Energy/SMART-Energy/libraries/MotionSensor/src/MotionSensor.h}
{\xe \v D:/Projects/SMART Energy/SMART-Energy/libraries/MotionSensor/src/MotionSensor.h}
{\bkmkstart AAAAAAAAAG}
{\bkmkend AAAAAAAAAG}
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     1 \par
   11 #ifndef MOTION_SENSOR_H\par
   12 #define MOTION_SENSOR_H\par
   13 \par
   15 #define MILLIS_PER_MIN (60000UL)\par
   16 \par
   17 #define MILLIS_PER_SECS (1000UL)\par
   18 \par
   19 #define SECS_PER_MIN   (60UL)\par
   20 \par
   21 #define secsToMillis(_sec_)   (  _sec_  * MILLIS_PER_SECS)\par
   22 \par
   23 #define millisToMinutes(_millis_) ((_millis_ / MILLIS_PER_MIN) % SECS_PER_MIN)\par
   24 \par
   25 #define millisToSeconds(_millis_) (_millis_ / MILLIS_PER_SECS)\par
   26 \par
   27 #include "Arduino.h"\par
   28 \par
   29 class MotionSensor\par
   30 \{\par
   31 public:\par
   32     MotionSensor();\par
   36     void begin(int);\par
   41     void start(int,int);\par
   47     void stop();\par
   52     bool read();\par
   57     void update();\par
   62     int getInterval();\par
   67     int getRelay();\par
   72 private:\par
   73     int _port;                      \par
   74     int _relay;                     \par
   75     unsigned long _interval;        \par
   76     unsigned long _previousMillis;  \par
   77     bool _detectedMotion;           \par
   78 \};\par
   79 \par
   80 #endif\par
   81 \par
}
\par \pard\plain 

\pard\plain \sect\sbknone
{\pard\widctlpar\brdrb\brdremboss\brdrw15\brsp20 \adjustright \par}
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
D:/Projects/SMART Energy/SMART-Energy/libraries/RelayShield/src/Relay.cpp File Reference\par \pard\plain 
{\tc\tcl2 \v D:/Projects/SMART Energy/SMART-Energy/libraries/RelayShield/src/Relay.cpp}
{\xe \v D:/Projects/SMART Energy/SMART-Energy/libraries/RelayShield/src/Relay.cpp}
{\bkmkstart AAAAAAAABI}
{\bkmkend AAAAAAAABI}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include <SPI.h>}\par
{\f2 #include "Relay.h"}\par
}
\par \pard\plain 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Relay.cpp\par \pard\plain 
{\tc\tcl2 \v D:/Projects/SMART Energy/SMART-Energy/libraries/RelayShield/src/Relay.cpp}
{\xe \v D:/Projects/SMART Energy/SMART-Energy/libraries/RelayShield/src/Relay.cpp}
{\bkmkstart AAAAAAAAAH}
{\bkmkend AAAAAAAAAH}
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     1 /*\par
    2  * Relay.cpp - Relay library\par
    3  * Guilherme Engler Stadelhofer\par
    4  */\par
    5 //******************************************************************************\par
    6 //* Includes\par
    7 //******************************************************************************\par
    8 \par
    9 #include <SPI.h>\par
   10 #include "Relay.h"\par
   11 \par
   12 //******************************************************************************\par
   13 //* Constructors\par
   14 //******************************************************************************\par
   15 Relay::Relay()\par
   16 \{\par
   17     this->state = false;\par
   18     this->pin = 0;\par
   19 \}\par
   20 \par
   21 //******************************************************************************\par
   22 //* Public Methods\par
   23 //******************************************************************************\par
   24 \par
   25 void Relay::begin(int pin)\par
   26 \{\par
   27     if (this->pin == 0) \{\par
   28         this->pin = pin;\par
   29         \par
   30         pinMode(this->pin, OUTPUT);\par
   31         digitalWrite(this->pin, HIGH);\par
   32     \}\par
   33 \}\par
   34 \par
   35 bool Relay::toggleState()\par
   36 \{\par
   37     if (this->pin == 0) \{\par
   38         return false;\par
   39     \}\par
   40     \par
   41     digitalWrite(this->pin, this->state ? HIGH : LOW);\par
   42 \par
   43     // Inverte o estado do rel\'E9 \par
   44     this->state = !this->state;\par
   45     \par
   46     return this->state;\par
   47 \}\par
   48 \par
   49 bool Relay::activated()\par
   50 \{\par
   51     return this->state;\par
   52 \}\par
}
\par \pard\plain 

\pard\plain \sect\sbknone
{\pard\widctlpar\brdrb\brdremboss\brdrw15\brsp20 \adjustright \par}
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
D:/Projects/SMART Energy/SMART-Energy/libraries/RelayShield/src/Relay.h File Reference\par \pard\plain 
{\tc\tcl2 \v D:/Projects/SMART Energy/SMART-Energy/libraries/RelayShield/src/Relay.h}
{\xe \v D:/Projects/SMART Energy/SMART-Energy/libraries/RelayShield/src/Relay.h}
{\bkmkstart AAAAAAAABJ}
{\bkmkend AAAAAAAABJ}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Classes\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b Relay}\par
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This class allows a interface management to operate Relay\'B4s in an Arduino or any kind of micro controller. }}}
}
\par \pard\plain 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Relay.h\par \pard\plain 
{\tc\tcl2 \v D:/Projects/SMART Energy/SMART-Energy/libraries/RelayShield/src/Relay.h}
{\xe \v D:/Projects/SMART Energy/SMART-Energy/libraries/RelayShield/src/Relay.h}
{\bkmkstart AAAAAAAAAI}
{\bkmkend AAAAAAAAAI}
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     1 \par
   12 #ifndef RELAY_H\par
   13 #define RELAY_H\par
   14 \par
   15 class Relay \{\par
   16     \par
   17     private:\par
   18         int pin; \par
   19         bool state;\par
   21     public:\par
   22         Relay();\par
   26         void begin(int pin);\par
   31         bool toggleState();\par
   32         bool activated();\par
   33 \};\par
   34 \par
   35 #endif\par
}
\par \pard\plain 

\pard\plain \sect\sbknone
{\pard\widctlpar\brdrb\brdremboss\brdrw15\brsp20 \adjustright \par}
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
D:/Projects/SMART Energy/SMART-Energy/libraries/RelayShield/src/RelayShield.cpp File Reference\par \pard\plain 
{\tc\tcl2 \v D:/Projects/SMART Energy/SMART-Energy/libraries/RelayShield/src/RelayShield.cpp}
{\xe \v D:/Projects/SMART Energy/SMART-Energy/libraries/RelayShield/src/RelayShield.cpp}
{\bkmkstart AAAAAAAABK}
{\bkmkend AAAAAAAABK}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include <SPI.h>}\par
{\f2 #include "Config.h"}\par
{\f2 #include "RelayShield.h"}\par
}
\par \pard\plain 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
RelayShield.cpp\par \pard\plain 
{\tc\tcl2 \v D:/Projects/SMART Energy/SMART-Energy/libraries/RelayShield/src/RelayShield.cpp}
{\xe \v D:/Projects/SMART Energy/SMART-Energy/libraries/RelayShield/src/RelayShield.cpp}
{\bkmkstart AAAAAAAAAJ}
{\bkmkend AAAAAAAAAJ}
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     1 /*\par
    2  * RelayShield.cpp - Relay Shield library\par
    3  * Guilherme Engler Stadelhofer\par
    4  */\par
    5  \par
    6 //******************************************************************************\par
    7 //* Includes\par
    8 //******************************************************************************\par
    9 \par
   10 #include <SPI.h>\par
   11 \par
   12 #include "Config.h"\par
   13 #include "RelayShield.h"\par
   14 \par
   15 //******************************************************************************\par
   16 //* Constructors\par
   17 //******************************************************************************\par
   18 \par
   19 RelayShield::RelayShield() \{\par
   20     for (int i = 0; i < MAX_RELAY_QUANTITY; i++) \{\par
   21         this->relays[i] = new Relay();\par
   22     \}\par
   23 \}\par
   24 \par
   25 //******************************************************************************\par
   26 //* Public Methods\par
   27 //******************************************************************************\par
   28 \par
   29 void RelayShield::begin(int pin[])\par
   30 \{\par
   31     for (int i = 1; i <= MAX_RELAY_QUANTITY; i++) \{\par
   32         this->getRelay(i)->begin(pin[i - 1]);\par
   33     \}\par
   34 \}\par
   35 \par
   36 Relay* RelayShield::getRelay(int index)\par
   37 \{\par
   38     return this->relays[index - 1];\par
   39 \}\par
   40 \par
   41 bool RelayShield::acceptableRelayIndex(int index)\par
   42 \{\par
   43     return index > 0 && index <= MAX_RELAY_QUANTITY;\par
   44 \}\par
   45 \par
   46 bool RelayShield::anyRelayActivated()\par
   47 \{\par
   48     for (int i = 1; i <= MAX_RELAY_QUANTITY; i++) \{\par
   49         if (this->getRelay(i)->activated()) \{\par
   50             return true;\par
   51         \}\par
   52     \}\par
   53     \par
   54     return false;\par
   55 \}\par
}
\par \pard\plain 

\pard\plain \sect\sbknone
{\pard\widctlpar\brdrb\brdremboss\brdrw15\brsp20 \adjustright \par}
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
D:/Projects/SMART Energy/SMART-Energy/libraries/RelayShield/src/RelayShield.h File Reference\par \pard\plain 
{\tc\tcl2 \v D:/Projects/SMART Energy/SMART-Energy/libraries/RelayShield/src/RelayShield.h}
{\xe \v D:/Projects/SMART Energy/SMART-Energy/libraries/RelayShield/src/RelayShield.h}
{\bkmkstart AAAAAAAABL}
{\bkmkend AAAAAAAABL}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include <Config.h>}\par
{\f2 #include "Relay.h"}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Classes\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b RelayShield}\par
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This class allows a interface management to operate more than one {\b Relay} in an Arduino or any kind of micro controller. }}}
}
\par \pard\plain 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
RelayShield.h\par \pard\plain 
{\tc\tcl2 \v D:/Projects/SMART Energy/SMART-Energy/libraries/RelayShield/src/RelayShield.h}
{\xe \v D:/Projects/SMART Energy/SMART-Energy/libraries/RelayShield/src/RelayShield.h}
{\bkmkstart AAAAAAAAAK}
{\bkmkend AAAAAAAAAK}
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     1 \par
   14 #ifndef RELAY_SHIELD_H\par
   15 #define RELAY_SHIELD_H\par
   16 \par
   17 #include <Config.h>\par
   18 #include "Relay.h"\par
   19 \par
   20 class RelayShield \{\par
   21     \par
   22     private:\par
   23         Relay* relays[MAX_RELAY_QUANTITY]; \par
   25     public:\par
   26         RelayShield();\par
   30         void begin(int pin[]);\par
   35         Relay* getRelay(int index);\par
   40         bool acceptableRelayIndex(int index);\par
   41         bool anyRelayActivated();\par
   42 \};\par
   43 \par
   44 #endif\par
}
\par \pard\plain 

\pard\plain \sect\sbknone
{\pard\widctlpar\brdrb\brdremboss\brdrw15\brsp20 \adjustright \par}
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
D:/Projects/SMART Energy/SMART-Energy/libraries/VoltageSensor/src/VoltageSensor.cpp File Reference\par \pard\plain 
{\tc\tcl2 \v D:/Projects/SMART Energy/SMART-Energy/libraries/VoltageSensor/src/VoltageSensor.cpp}
{\xe \v D:/Projects/SMART Energy/SMART-Energy/libraries/VoltageSensor/src/VoltageSensor.cpp}
{\bkmkstart AAAAAAAABM}
{\bkmkend AAAAAAAABM}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include "VoltageSensor.h"}\par
}
\par \pard\plain 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
VoltageSensor.cpp\par \pard\plain 
{\tc\tcl2 \v D:/Projects/SMART Energy/SMART-Energy/libraries/VoltageSensor/src/VoltageSensor.cpp}
{\xe \v D:/Projects/SMART Energy/SMART-Energy/libraries/VoltageSensor/src/VoltageSensor.cpp}
{\bkmkstart AAAAAAAAAL}
{\bkmkend AAAAAAAAAL}
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     1 /*\par
    2  * VoltageSensor.cpp - Voltage Sensor library\par
    3  * Lucas C. Casagrande\par
    4  */\par
    5 \par
    6 //******************************************************************************\par
    7 //* Includes\par
    8 //******************************************************************************\par
    9 \par
   10 #include "VoltageSensor.h"\par
   11 \par
   12 //******************************************************************************\par
   13 //* Constructors\par
   14 //******************************************************************************\par
   15 \par
   16 VoltageSensor::VoltageSensor()\par
   17 \{\par
   18     this->_sumVoltage = 0;\par
   19     this->_avgVoltage = 0;\par
   20     this->_cont = 0;\par
   21     this->_divisor = 100;\par
   22 \}\par
   23 //******************************************************************************\par
   24 //* Public Methods\par
   25 //******************************************************************************\par
   26 \par
   27 void VoltageSensor::begin(int port)\par
   28 \{\par
   29     this->_port = port;\par
   30 \}\par
   31 \par
   32 void VoltageSensor::update()\par
   33 \{\par
   34     int value = analogRead(_port);  \par
   35 \par
   36     calculateAvg(value);\par
   37 \}\par
   38 \par
   39 void VoltageSensor::reset()\par
   40 \{\par
   41     this->_cont     = 0;\par
   42     this->_sumVoltage   = 0;\par
   43 \}\par
   44 \par
   45 int VoltageSensor::read()\par
   46 \{\par
   47     return static_cast<int>(_avgVoltage);\par
   48 \}\par
   49 \par
   50 void VoltageSensor::setDivisor(int divisor)\par
   51 \{\par
   52     this->_divisor = divisor;\par
   53 \}\par
   54 \par
   55 \par
   56 //******************************************************************************\par
   57 //* Private Methods\par
   58 //******************************************************************************\par
   59 \par
   60 void VoltageSensor::calculateAvg(int value)\par
   61 \{\par
   62     _sumVoltage  += map(value, 0, 993, 0, 219);\par
   63     _cont++;\par
   64     \par
   65     if (_cont == _divisor) \{\par
   66         _avgVoltage = _sumVoltage / _divisor;\par
   67         reset();\par
   68     \}\par
   69 \}\par
}
\par \pard\plain 

\pard\plain \sect\sbknone
{\pard\widctlpar\brdrb\brdremboss\brdrw15\brsp20 \adjustright \par}
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
D:/Projects/SMART Energy/SMART-Energy/libraries/VoltageSensor/src/VoltageSensor.h File Reference\par \pard\plain 
{\tc\tcl2 \v D:/Projects/SMART Energy/SMART-Energy/libraries/VoltageSensor/src/VoltageSensor.h}
{\xe \v D:/Projects/SMART Energy/SMART-Energy/libraries/VoltageSensor/src/VoltageSensor.h}
{\bkmkstart AAAAAAAABN}
{\bkmkend AAAAAAAABN}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include "Arduino.h"}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Classes\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b VoltageSensor}\par
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This class allows a interface management to operate the voltage sensor in an Arduino or any kind of micro controller. }}}
}
\par \pard\plain 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
VoltageSensor.h\par \pard\plain 
{\tc\tcl2 \v D:/Projects/SMART Energy/SMART-Energy/libraries/VoltageSensor/src/VoltageSensor.h}
{\xe \v D:/Projects/SMART Energy/SMART-Energy/libraries/VoltageSensor/src/VoltageSensor.h}
{\bkmkstart AAAAAAAAAM}
{\bkmkend AAAAAAAAAM}
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     1 \par
   18 #ifndef VOLTAGE_SENSOR_H    \par
   19 #define VOLTAGE_SENSOR_H\par
   20 #include "Arduino.h"\par
   21 \par
   22 class VoltageSensor\par
   23 \{\par
   24     public:\par
   25         VoltageSensor();;\par
   29         int read();\par
   34         void begin(int);\par
   39         void update();\par
   43         void setDivisor(int);\par
   49         void reset();\par
   53     private:\par
   54         int _port;           \par
   55         int _divisor;        \par
   56         int _cont;           \par
   57         long _sumVoltage;    \par
   58         long _avgVoltage;    \par
   59         void calculateAvg(int); \par
   84 \};\par
   85 \par
   86 \par
   87 \par
   88 \par
   89 \par
   90 #endif\par
   91 \par
}

\pard\plain \sect\sbknone
{\pard\widctlpar\brdrb\brdrs\brdrw75\brsp20 \adjustright \par}
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid Index\par 
\pard\plain 
{\tc \v Index}
{\field\fldedit {\*\fldinst INDEX \\c2 \\*MERGEFORMAT}{\fldrslt INDEX}}
}